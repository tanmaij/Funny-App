[{"D:\\LearnReact\\amongustask\\src\\index.js":"1","D:\\LearnReact\\amongustask\\src\\App.js":"2","D:\\LearnReact\\amongustask\\src\\Component\\WaterVendingMachine.js":"3","D:\\LearnReact\\amongustask\\src\\Component\\Box.js":"4","D:\\LearnReact\\amongustask\\src\\Component\\WaterBottle.js":"5","D:\\LearnReact\\amongustask\\src\\Component\\KeyVending.js":"6","D:\\LearnReact\\amongustask\\src\\Component\\ScreenVending.js":"7","D:\\LearnReact\\amongustask\\src\\Image\\Image.js":"8","D:\\LearnReact\\amongustask\\src\\Component\\Vending.js":"9"},{"size":432,"mtime":1626176147821,"results":"10","hashOfConfig":"11"},{"size":1825,"mtime":1627465745218,"results":"12","hashOfConfig":"11"},{"size":558,"mtime":1627380033492,"results":"13","hashOfConfig":"11"},{"size":314,"mtime":1627357903630,"results":"14","hashOfConfig":"11"},{"size":519,"mtime":1627377366112,"results":"15","hashOfConfig":"11"},{"size":553,"mtime":1627458709700,"results":"16","hashOfConfig":"11"},{"size":240,"mtime":1627384318577,"results":"17","hashOfConfig":"11"},{"size":532,"mtime":1627359321857,"results":"18","hashOfConfig":"11"},{"size":855,"mtime":1627465817865,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4r3juz",{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"D:\\LearnReact\\amongustask\\src\\index.js",[],"D:\\LearnReact\\amongustask\\src\\App.js",["43","44"],"import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Vending from \"./Component/Vending\";\n\nimport WaterVending from \"./Component/WaterVendingMachine\";\nfunction App() {\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  var IdBox = [\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\"];\n  var WaterType = [\"sting\", \"coca\", \"fanta\", \"sprite\"];\n  const Water = WaterType[getRandomInt(WaterType.length)];\n  var BoxWater = [];\n  var GetItem = (IndexBox, IndexWater) => {\n    BoxWater.push({ id: IdBox[IndexBox], Type: WaterType[IndexWater] });\n    IdBox.splice(IndexBox, 1);\n    WaterType.splice(IndexWater, 1);\n  };\n  const init = () => {\n    IdBox = [\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\"];\n    WaterType = [\"sting\", \"coca\", \"fanta\", \"sprite\"];\n\n    BoxWater = [];\n    while (WaterType.length > 0) {\n      GetItem(getRandomInt(IdBox.length), getRandomInt(WaterType.length));\n    }\n    IdBox.forEach((idd) => {\n      BoxWater.push({ id: idd, Type: \"white\" });\n    });\n    const IdBoxT = [\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"B3\"];\n    for (var i = 0; i < IdBoxT.length; i++) {\n      for (var j = 0; j < BoxWater.length; j++) {\n        if (BoxWater[j].id == IdBoxT[i]) {\n          var temp = BoxWater[j];\n          BoxWater[j] = BoxWater[i];\n          BoxWater[i] = temp;\n          break;\n        }\n      }\n    }\n    return BoxWater;\n  };\n  const [BW, setBW] = useState(init());\n  const NewGame = () => {\n    setBW(init());\n  };\n  return (\n    <>\n      <h1 style={{ textAlign: \"center\" }}> Hay lay {Water}</h1>\n      <div className=\"WV\" style={{ gridTemplateColumns: \"60% auto\" }}>\n        <WaterVending BoxWater={BW} />\n        <Vending\n          style={{ marginTop: \"50px\" }}\n          CheckKeyLog={{ setBWW: NewGame, Waterr: Water, Check: BW }}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","D:\\LearnReact\\amongustask\\src\\Component\\WaterVendingMachine.js",["45"],"import React from \"react\";\r\nimport Box from \"./Box\";\r\nimport \"../App.css\";\r\nconst WaterVending = ({ BoxWater }) => {\r\n  const IdType = {\r\n    id: \"A1\",\r\n    Type: \"sting\",\r\n  };\r\n  return (\r\n    <span className=\"WaterVending\">\r\n      {BoxWater.map((Boxwater) => (\r\n        <Box IdType={Boxwater} />\r\n      ))}\r\n      {/* <Box IdType={IdType} />\r\n      <Box IdType={IdType} />\r\n      <Box IdType={IdType} />\r\n      <Box IdType={IdType} />\r\n      <Box IdType={IdType} />\r\n      <Box IdType={IdType} /> */}\r\n    </span>\r\n  );\r\n};\r\nexport default WaterVending;\r\n","D:\\LearnReact\\amongustask\\src\\Component\\Box.js",[],"D:\\LearnReact\\amongustask\\src\\Component\\WaterBottle.js",["46"],"import React from \"react\";\r\nimport \"../App.css\";\r\nimport Image from \"../Image/Image\";\r\nvar WaterBottle = (Type) => {\r\n  var TypeStr = Type.Type;\r\n  var Img;\r\n\r\n  for (let i = 0; i < Image.length; i++) {\r\n    if (Image[i].GetImage(TypeStr)) Img = Image[i].image;\r\n  }\r\n  return (\r\n    <div className=\"waterbottle\">\r\n      <img\r\n        style={\r\n          ({ objectFit: \"cover\" }, { width: \"120px\" }, { height: \"120px\" })\r\n        }\r\n        src={Img}\r\n      ></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WaterBottle;\r\n","D:\\LearnReact\\amongustask\\src\\Component\\KeyVending.js",[],"D:\\LearnReact\\amongustask\\src\\Component\\ScreenVending.js",[],"D:\\LearnReact\\amongustask\\src\\Image\\Image.js",["47"],"import coca from \"./coca.jpg\";\r\nimport fanta from \"./fanta.jpg\";\r\nimport sprite from \"./sprite.jpg\";\r\nimport sting from \"./sting.jpg\";\r\nimport white from \"./white.jpg\";\r\n\r\nclass Image {\r\n  constructor(type, image) {\r\n    this.type = type;\r\n    this.image = image;\r\n  }\r\n  GetImage = (type) => {\r\n    return this.type == type;\r\n  };\r\n}\r\nconst images = [\r\n  new Image(\"coca\", coca),\r\n  new Image(\"fanta\", fanta),\r\n  new Image(\"sprite\", sprite),\r\n  new Image(\"sting\", sting),\r\n  new Image(\"white\", white),\r\n];\r\nexport default images;\r\n","D:\\LearnReact\\amongustask\\src\\Component\\Vending.js",["48","49"],"import \"../App.css\";\r\nimport KeyVending from \"./KeyVending\";\r\nimport ScreenVending from \"./ScreenVending\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Vending = ({ CheckKeyLog }) => {\r\n  const [content, setcontent] = useState(\"\");\r\n  const HandleClick = (contentx) => {\r\n    var NewKey = content + contentx;\r\n\r\n    if (NewKey.length > 1) {\r\n      var Id;\r\n      CheckKeyLog.Check.forEach((bW) => {\r\n        if (bW.Type == CheckKeyLog.Waterr) {\r\n          Id = bW.id;\r\n        }\r\n      });\r\n\r\n      if (Id == NewKey) {\r\n        NewKey = \"\";\r\n        CheckKeyLog.setBWW();\r\n      } else {\r\n        NewKey = \"\";\r\n      }\r\n    }\r\n    setcontent(NewKey);\r\n  };\r\n  return (\r\n    <div style={{ marginTop: \"50px\" }}>\r\n      <ScreenVending Content={content} />\r\n      <KeyVending handleClick={HandleClick} />\r\n    </div>\r\n  );\r\n};\r\nexport default Vending;\r\n",{"ruleId":"50","severity":1,"message":"51","line":1,"column":10,"nodeType":"52","messageId":"53","endLine":1,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":33,"column":28,"nodeType":"56","messageId":"57","endLine":33,"endColumn":30},{"ruleId":"50","severity":1,"message":"58","line":5,"column":9,"nodeType":"52","messageId":"53","endLine":5,"endColumn":15},{"ruleId":"59","severity":1,"message":"60","line":13,"column":7,"nodeType":"61","endLine":18,"endColumn":8},{"ruleId":"54","severity":1,"message":"55","line":13,"column":22,"nodeType":"56","messageId":"57","endLine":13,"endColumn":24},{"ruleId":"54","severity":1,"message":"55","line":14,"column":21,"nodeType":"56","messageId":"57","endLine":14,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":19,"column":14,"nodeType":"56","messageId":"57","endLine":19,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'IdType' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]